/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.techishthoughts.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Education extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 982084541590079045L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Education\",\"namespace\":\"org.techishthoughts.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"institution\",\"type\":\"string\"},{\"name\":\"degree\",\"type\":\"string\"},{\"name\":\"fieldOfStudy\",\"type\":\"string\"},{\"name\":\"startDate\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"endDate\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"gpa\",\"type\":\"double\"},{\"name\":\"honors\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Education> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Education> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Education> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Education> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Education> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Education to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Education from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Education instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Education fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private java.lang.CharSequence institution;
  private java.lang.CharSequence degree;
  private java.lang.CharSequence fieldOfStudy;
  private java.lang.Long startDate;
  private java.lang.Long endDate;
  private double gpa;
  private java.lang.CharSequence honors;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Education() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param institution The new value for institution
   * @param degree The new value for degree
   * @param fieldOfStudy The new value for fieldOfStudy
   * @param startDate The new value for startDate
   * @param endDate The new value for endDate
   * @param gpa The new value for gpa
   * @param honors The new value for honors
   */
  public Education(java.lang.Long id, java.lang.CharSequence institution, java.lang.CharSequence degree, java.lang.CharSequence fieldOfStudy, java.lang.Long startDate, java.lang.Long endDate, java.lang.Double gpa, java.lang.CharSequence honors) {
    this.id = id;
    this.institution = institution;
    this.degree = degree;
    this.fieldOfStudy = fieldOfStudy;
    this.startDate = startDate;
    this.endDate = endDate;
    this.gpa = gpa;
    this.honors = honors;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return institution;
    case 2: return degree;
    case 3: return fieldOfStudy;
    case 4: return startDate;
    case 5: return endDate;
    case 6: return gpa;
    case 7: return honors;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: institution = (java.lang.CharSequence)value$; break;
    case 2: degree = (java.lang.CharSequence)value$; break;
    case 3: fieldOfStudy = (java.lang.CharSequence)value$; break;
    case 4: startDate = (java.lang.Long)value$; break;
    case 5: endDate = (java.lang.Long)value$; break;
    case 6: gpa = (java.lang.Double)value$; break;
    case 7: honors = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'institution' field.
   * @return The value of the 'institution' field.
   */
  public java.lang.CharSequence getInstitution() {
    return institution;
  }


  /**
   * Sets the value of the 'institution' field.
   * @param value the value to set.
   */
  public void setInstitution(java.lang.CharSequence value) {
    this.institution = value;
  }

  /**
   * Gets the value of the 'degree' field.
   * @return The value of the 'degree' field.
   */
  public java.lang.CharSequence getDegree() {
    return degree;
  }


  /**
   * Sets the value of the 'degree' field.
   * @param value the value to set.
   */
  public void setDegree(java.lang.CharSequence value) {
    this.degree = value;
  }

  /**
   * Gets the value of the 'fieldOfStudy' field.
   * @return The value of the 'fieldOfStudy' field.
   */
  public java.lang.CharSequence getFieldOfStudy() {
    return fieldOfStudy;
  }


  /**
   * Sets the value of the 'fieldOfStudy' field.
   * @param value the value to set.
   */
  public void setFieldOfStudy(java.lang.CharSequence value) {
    this.fieldOfStudy = value;
  }

  /**
   * Gets the value of the 'startDate' field.
   * @return The value of the 'startDate' field.
   */
  public java.lang.Long getStartDate() {
    return startDate;
  }


  /**
   * Sets the value of the 'startDate' field.
   * @param value the value to set.
   */
  public void setStartDate(java.lang.Long value) {
    this.startDate = value;
  }

  /**
   * Gets the value of the 'endDate' field.
   * @return The value of the 'endDate' field.
   */
  public java.lang.Long getEndDate() {
    return endDate;
  }


  /**
   * Sets the value of the 'endDate' field.
   * @param value the value to set.
   */
  public void setEndDate(java.lang.Long value) {
    this.endDate = value;
  }

  /**
   * Gets the value of the 'gpa' field.
   * @return The value of the 'gpa' field.
   */
  public double getGpa() {
    return gpa;
  }


  /**
   * Sets the value of the 'gpa' field.
   * @param value the value to set.
   */
  public void setGpa(double value) {
    this.gpa = value;
  }

  /**
   * Gets the value of the 'honors' field.
   * @return The value of the 'honors' field.
   */
  public java.lang.CharSequence getHonors() {
    return honors;
  }


  /**
   * Sets the value of the 'honors' field.
   * @param value the value to set.
   */
  public void setHonors(java.lang.CharSequence value) {
    this.honors = value;
  }

  /**
   * Creates a new Education RecordBuilder.
   * @return A new Education RecordBuilder
   */
  public static org.techishthoughts.avro.model.Education.Builder newBuilder() {
    return new org.techishthoughts.avro.model.Education.Builder();
  }

  /**
   * Creates a new Education RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Education RecordBuilder
   */
  public static org.techishthoughts.avro.model.Education.Builder newBuilder(org.techishthoughts.avro.model.Education.Builder other) {
    if (other == null) {
      return new org.techishthoughts.avro.model.Education.Builder();
    } else {
      return new org.techishthoughts.avro.model.Education.Builder(other);
    }
  }

  /**
   * Creates a new Education RecordBuilder by copying an existing Education instance.
   * @param other The existing instance to copy.
   * @return A new Education RecordBuilder
   */
  public static org.techishthoughts.avro.model.Education.Builder newBuilder(org.techishthoughts.avro.model.Education other) {
    if (other == null) {
      return new org.techishthoughts.avro.model.Education.Builder();
    } else {
      return new org.techishthoughts.avro.model.Education.Builder(other);
    }
  }

  /**
   * RecordBuilder for Education instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Education>
    implements org.apache.avro.data.RecordBuilder<Education> {

    private long id;
    private java.lang.CharSequence institution;
    private java.lang.CharSequence degree;
    private java.lang.CharSequence fieldOfStudy;
    private java.lang.Long startDate;
    private java.lang.Long endDate;
    private double gpa;
    private java.lang.CharSequence honors;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.techishthoughts.avro.model.Education.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.institution)) {
        this.institution = data().deepCopy(fields()[1].schema(), other.institution);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.degree)) {
        this.degree = data().deepCopy(fields()[2].schema(), other.degree);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.fieldOfStudy)) {
        this.fieldOfStudy = data().deepCopy(fields()[3].schema(), other.fieldOfStudy);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.startDate)) {
        this.startDate = data().deepCopy(fields()[4].schema(), other.startDate);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.endDate)) {
        this.endDate = data().deepCopy(fields()[5].schema(), other.endDate);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.gpa)) {
        this.gpa = data().deepCopy(fields()[6].schema(), other.gpa);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.honors)) {
        this.honors = data().deepCopy(fields()[7].schema(), other.honors);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing Education instance
     * @param other The existing instance to copy.
     */
    private Builder(org.techishthoughts.avro.model.Education other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.institution)) {
        this.institution = data().deepCopy(fields()[1].schema(), other.institution);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.degree)) {
        this.degree = data().deepCopy(fields()[2].schema(), other.degree);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fieldOfStudy)) {
        this.fieldOfStudy = data().deepCopy(fields()[3].schema(), other.fieldOfStudy);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.startDate)) {
        this.startDate = data().deepCopy(fields()[4].schema(), other.startDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.endDate)) {
        this.endDate = data().deepCopy(fields()[5].schema(), other.endDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.gpa)) {
        this.gpa = data().deepCopy(fields()[6].schema(), other.gpa);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.honors)) {
        this.honors = data().deepCopy(fields()[7].schema(), other.honors);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.techishthoughts.avro.model.Education.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.techishthoughts.avro.model.Education.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'institution' field.
      * @return The value.
      */
    public java.lang.CharSequence getInstitution() {
      return institution;
    }


    /**
      * Sets the value of the 'institution' field.
      * @param value The value of 'institution'.
      * @return This builder.
      */
    public org.techishthoughts.avro.model.Education.Builder setInstitution(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.institution = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'institution' field has been set.
      * @return True if the 'institution' field has been set, false otherwise.
      */
    public boolean hasInstitution() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'institution' field.
      * @return This builder.
      */
    public org.techishthoughts.avro.model.Education.Builder clearInstitution() {
      institution = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'degree' field.
      * @return The value.
      */
    public java.lang.CharSequence getDegree() {
      return degree;
    }


    /**
      * Sets the value of the 'degree' field.
      * @param value The value of 'degree'.
      * @return This builder.
      */
    public org.techishthoughts.avro.model.Education.Builder setDegree(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.degree = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'degree' field has been set.
      * @return True if the 'degree' field has been set, false otherwise.
      */
    public boolean hasDegree() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'degree' field.
      * @return This builder.
      */
    public org.techishthoughts.avro.model.Education.Builder clearDegree() {
      degree = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'fieldOfStudy' field.
      * @return The value.
      */
    public java.lang.CharSequence getFieldOfStudy() {
      return fieldOfStudy;
    }


    /**
      * Sets the value of the 'fieldOfStudy' field.
      * @param value The value of 'fieldOfStudy'.
      * @return This builder.
      */
    public org.techishthoughts.avro.model.Education.Builder setFieldOfStudy(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.fieldOfStudy = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'fieldOfStudy' field has been set.
      * @return True if the 'fieldOfStudy' field has been set, false otherwise.
      */
    public boolean hasFieldOfStudy() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'fieldOfStudy' field.
      * @return This builder.
      */
    public org.techishthoughts.avro.model.Education.Builder clearFieldOfStudy() {
      fieldOfStudy = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'startDate' field.
      * @return The value.
      */
    public java.lang.Long getStartDate() {
      return startDate;
    }


    /**
      * Sets the value of the 'startDate' field.
      * @param value The value of 'startDate'.
      * @return This builder.
      */
    public org.techishthoughts.avro.model.Education.Builder setStartDate(java.lang.Long value) {
      validate(fields()[4], value);
      this.startDate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'startDate' field has been set.
      * @return True if the 'startDate' field has been set, false otherwise.
      */
    public boolean hasStartDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'startDate' field.
      * @return This builder.
      */
    public org.techishthoughts.avro.model.Education.Builder clearStartDate() {
      startDate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'endDate' field.
      * @return The value.
      */
    public java.lang.Long getEndDate() {
      return endDate;
    }


    /**
      * Sets the value of the 'endDate' field.
      * @param value The value of 'endDate'.
      * @return This builder.
      */
    public org.techishthoughts.avro.model.Education.Builder setEndDate(java.lang.Long value) {
      validate(fields()[5], value);
      this.endDate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'endDate' field has been set.
      * @return True if the 'endDate' field has been set, false otherwise.
      */
    public boolean hasEndDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'endDate' field.
      * @return This builder.
      */
    public org.techishthoughts.avro.model.Education.Builder clearEndDate() {
      endDate = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'gpa' field.
      * @return The value.
      */
    public double getGpa() {
      return gpa;
    }


    /**
      * Sets the value of the 'gpa' field.
      * @param value The value of 'gpa'.
      * @return This builder.
      */
    public org.techishthoughts.avro.model.Education.Builder setGpa(double value) {
      validate(fields()[6], value);
      this.gpa = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'gpa' field has been set.
      * @return True if the 'gpa' field has been set, false otherwise.
      */
    public boolean hasGpa() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'gpa' field.
      * @return This builder.
      */
    public org.techishthoughts.avro.model.Education.Builder clearGpa() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'honors' field.
      * @return The value.
      */
    public java.lang.CharSequence getHonors() {
      return honors;
    }


    /**
      * Sets the value of the 'honors' field.
      * @param value The value of 'honors'.
      * @return This builder.
      */
    public org.techishthoughts.avro.model.Education.Builder setHonors(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.honors = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'honors' field has been set.
      * @return True if the 'honors' field has been set, false otherwise.
      */
    public boolean hasHonors() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'honors' field.
      * @return This builder.
      */
    public org.techishthoughts.avro.model.Education.Builder clearHonors() {
      honors = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Education build() {
      try {
        Education record = new Education();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.institution = fieldSetFlags()[1] ? this.institution : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.degree = fieldSetFlags()[2] ? this.degree : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.fieldOfStudy = fieldSetFlags()[3] ? this.fieldOfStudy : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.startDate = fieldSetFlags()[4] ? this.startDate : (java.lang.Long) defaultValue(fields()[4]);
        record.endDate = fieldSetFlags()[5] ? this.endDate : (java.lang.Long) defaultValue(fields()[5]);
        record.gpa = fieldSetFlags()[6] ? this.gpa : (java.lang.Double) defaultValue(fields()[6]);
        record.honors = fieldSetFlags()[7] ? this.honors : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Education>
    WRITER$ = (org.apache.avro.io.DatumWriter<Education>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Education>
    READER$ = (org.apache.avro.io.DatumReader<Education>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeString(this.institution);

    out.writeString(this.degree);

    out.writeString(this.fieldOfStudy);

    if (this.startDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.startDate);
    }

    if (this.endDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.endDate);
    }

    out.writeDouble(this.gpa);

    if (this.honors == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.honors);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.institution = in.readString(this.institution instanceof Utf8 ? (Utf8)this.institution : null);

      this.degree = in.readString(this.degree instanceof Utf8 ? (Utf8)this.degree : null);

      this.fieldOfStudy = in.readString(this.fieldOfStudy instanceof Utf8 ? (Utf8)this.fieldOfStudy : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.startDate = null;
      } else {
        this.startDate = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.endDate = null;
      } else {
        this.endDate = in.readLong();
      }

      this.gpa = in.readDouble();

      if (in.readIndex() != 1) {
        in.readNull();
        this.honors = null;
      } else {
        this.honors = in.readString(this.honors instanceof Utf8 ? (Utf8)this.honors : null);
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.institution = in.readString(this.institution instanceof Utf8 ? (Utf8)this.institution : null);
          break;

        case 2:
          this.degree = in.readString(this.degree instanceof Utf8 ? (Utf8)this.degree : null);
          break;

        case 3:
          this.fieldOfStudy = in.readString(this.fieldOfStudy instanceof Utf8 ? (Utf8)this.fieldOfStudy : null);
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.startDate = null;
          } else {
            this.startDate = in.readLong();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.endDate = null;
          } else {
            this.endDate = in.readLong();
          }
          break;

        case 6:
          this.gpa = in.readDouble();
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.honors = null;
          } else {
            this.honors = in.readString(this.honors instanceof Utf8 ? (Utf8)this.honors : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










