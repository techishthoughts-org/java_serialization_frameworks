version: '3.8'

services:
  # Jackson POC Service
  jackson-poc:
    build:
      context: ./jackson-poc
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
      - "8441:8441"  # SSL port
      - "9441:9441"  # HTTP/3 port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KEYSTORE_PASSWORD=changeit
      - JVM_OPTS=-Xmx4g -Xms2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8441/actuator/health", "--insecure"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - serialization-network

  # Protocol Buffers POC Service
  protobuf-poc:
    build:
      context: ./protobuf-poc
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
      - "8442:8442"  # SSL port
      - "9442:9442"  # HTTP/3 port
      - "9090:9090"  # gRPC port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KEYSTORE_PASSWORD=changeit
      - JVM_OPTS=-Xmx2g -Xms1g
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8442/actuator/health", "--insecure"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - serialization-network

  # Avro POC Service
  avro-poc:
    build:
      context: ./avro-poc
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
      - "8443:8443"  # SSL port
      - "9443:9443"  # HTTP/3 port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KEYSTORE_PASSWORD=changeit
      - JVM_OPTS=-Xmx4g -Xms2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC
    depends_on:
      - kafka
      - schema-registry
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8443/actuator/health", "--insecure"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - serialization-network



  # Kryo POC Service
  kryo-poc:
    build:
      context: ./kryo-poc
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
      - "8444:8444"  # SSL port
      - "9444:9444"  # HTTP/3 port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KEYSTORE_PASSWORD=changeit
      - JVM_OPTS=-Xmx4g -Xms2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8444/actuator/health", "--insecure"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - serialization-network

  # Apache Fory POC Service
  fory-poc:
    build:
      context: ./fory-poc
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
      - "8445:8445"  # SSL port
      - "9445:9445"  # HTTP/3 port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KEYSTORE_PASSWORD=changeit
      - JVM_OPTS=-Xmx4g -Xms2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8445/actuator/health", "--insecure"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - serialization-network

  # Cap'n Proto POC Service
  capnproto-poc:
    build:
      context: ./capnproto-poc
      dockerfile: Dockerfile
    ports:
      - "8087:8087"
      - "8447:8447"  # SSL port
      - "9447:9447"  # HTTP/3 port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KEYSTORE_PASSWORD=changeit
      - JVM_OPTS=-Xmx4g -Xms2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8447/actuator/health", "--insecure"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - serialization-network

  # Apache Thrift POC Service
  thrift-poc:
    build:
      context: ./thrift-poc
      dockerfile: Dockerfile
    ports:
      - "8088:8088"
      - "8448:8448"  # SSL port
      - "9448:9448"  # HTTP/3 port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KEYSTORE_PASSWORD=changeit
      - JVM_OPTS=-Xmx4g -Xms2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8448/actuator/health", "--insecure"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - serialization-network

  # Hessian POC Service
  hessian-poc:
    build:
      context: ./hessian-poc
      dockerfile: Dockerfile
    ports:
      - "8089:8089"
      - "8449:8449"  # SSL port
      - "9449:9449"  # HTTP/3 port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KEYSTORE_PASSWORD=changeit
      - JVM_OPTS=-Xmx4g -Xms2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8449/actuator/health", "--insecure"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - serialization-network

  # Compression Benchmark Service
  compression-benchmark:
    build:
      context: ./compression-benchmark
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
      - "8446:8446"  # SSL port
      - "9446:9446"  # HTTP/3 port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KEYSTORE_PASSWORD=changeit
      - JVM_OPTS=-Xmx4g -Xms2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8446/actuator/health", "--insecure"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - serialization-network

  # Benchmark Comparison Service
  benchmark-comparison:
    build:
      context: ./benchmark-comparison
      dockerfile: Dockerfile
    ports:
      - "8080:8080"  # Main benchmark dashboard
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JVM_OPTS=-Xmx6g -Xms3g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC
      - JACKSON_SERVICE_URL=http://jackson-poc:8081
      - PROTOBUF_SERVICE_URL=http://protobuf-poc:8082
      - AVRO_SERVICE_URL=http://avro-poc:8083
      - KRYO_SERVICE_URL=http://kryo-poc:8084
      - FORY_SERVICE_URL=http://fory-poc:8085
      - CAPNPROTO_SERVICE_URL=http://capnproto-poc:8087
      - THRIFT_SERVICE_URL=http://thrift-poc:8088
      - HESSIAN_SERVICE_URL=http://hessian-poc:8089
      - COMPRESSION_SERVICE_URL=http://compression-benchmark:8086
    depends_on:
      - jackson-poc
      - protobuf-poc
      - avro-poc
      - kryo-poc
      - fory-poc
      - capnproto-poc
      - thrift-poc
      - hessian-poc
      - compression-benchmark
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - serialization-network

  # Supporting Services

  # Redis for Kryo caching demos
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - serialization-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - serialization-network

  # Kafka for Avro demo
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - serialization-network

  # Schema Registry for Avro
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - serialization-network

  # Monitoring and Observability

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - serialization-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - serialization-network

networks:
  serialization-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  kafka-data:
  redis-data:
  prometheus-data:
  grafana-data:
