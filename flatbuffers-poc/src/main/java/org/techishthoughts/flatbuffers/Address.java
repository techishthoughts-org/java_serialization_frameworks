// automatically generated by the FlatBuffers compiler, do not modify

package org.techishthoughts.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Address extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static Address getRootAsAddress(ByteBuffer _bb) { return getRootAsAddress(_bb, new Address()); }
  public static Address getRootAsAddress(ByteBuffer _bb, Address obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Address __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long id() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateId(long id) { int o = __offset(4); if (o != 0) { bb.putLong(o + bb_pos, id); return true; } else { return false; } }
  public String street() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer streetAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer streetInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String city() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cityAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer cityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public String state() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stateAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer stateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public String zipCode() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer zipCodeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer zipCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public String country() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer countryAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer countryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public byte addressType() { int o = __offset(16); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateAddressType(byte addressType) { int o = __offset(16); if (o != 0) { bb.put(o + bb_pos, addressType); return true; } else { return false; } }
  public boolean isPrimary() { int o = __offset(18); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean mutateIsPrimary(boolean isPrimary) { int o = __offset(18); if (o != 0) { bb.put(o + bb_pos, (byte)(isPrimary ? 1 : 0)); return true; } else { return false; } }

  public static int createAddress(FlatBufferBuilder builder,
      long id,
      int streetOffset,
      int cityOffset,
      int stateOffset,
      int zipCodeOffset,
      int countryOffset,
      byte addressType,
      boolean isPrimary) {
    builder.startTable(8);
    Address.addId(builder, id);
    Address.addCountry(builder, countryOffset);
    Address.addZipCode(builder, zipCodeOffset);
    Address.addState(builder, stateOffset);
    Address.addCity(builder, cityOffset);
    Address.addStreet(builder, streetOffset);
    Address.addIsPrimary(builder, isPrimary);
    Address.addAddressType(builder, addressType);
    return Address.endAddress(builder);
  }

  public static void startAddress(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addId(FlatBufferBuilder builder, long id) { builder.addLong(0, id, 0L); }
  public static void addStreet(FlatBufferBuilder builder, int streetOffset) { builder.addOffset(1, streetOffset, 0); }
  public static void addCity(FlatBufferBuilder builder, int cityOffset) { builder.addOffset(2, cityOffset, 0); }
  public static void addState(FlatBufferBuilder builder, int stateOffset) { builder.addOffset(3, stateOffset, 0); }
  public static void addZipCode(FlatBufferBuilder builder, int zipCodeOffset) { builder.addOffset(4, zipCodeOffset, 0); }
  public static void addCountry(FlatBufferBuilder builder, int countryOffset) { builder.addOffset(5, countryOffset, 0); }
  public static void addAddressType(FlatBufferBuilder builder, byte addressType) { builder.addByte(6, addressType, 0); }
  public static void addIsPrimary(FlatBufferBuilder builder, boolean isPrimary) { builder.addBoolean(7, isPrimary, false); }
  public static int endAddress(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Address get(int j) { return get(new Address(), j); }
    public Address get(Address obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

