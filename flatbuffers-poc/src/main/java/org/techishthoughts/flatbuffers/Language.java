// automatically generated by the FlatBuffers compiler, do not modify

package org.techishthoughts.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Language extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static Language getRootAsLanguage(ByteBuffer _bb) { return getRootAsLanguage(_bb, new Language()); }
  public static Language getRootAsLanguage(ByteBuffer _bb, Language obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Language __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long id() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateId(long id) { int o = __offset(4); if (o != 0) { bb.putLong(o + bb_pos, id); return true; } else { return false; } }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public byte proficiency() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateProficiency(byte proficiency) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, proficiency); return true; } else { return false; } }
  public boolean isNative() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean mutateIsNative(boolean isNative) { int o = __offset(10); if (o != 0) { bb.put(o + bb_pos, (byte)(isNative ? 1 : 0)); return true; } else { return false; } }

  public static int createLanguage(FlatBufferBuilder builder,
      long id,
      int nameOffset,
      byte proficiency,
      boolean isNative) {
    builder.startTable(4);
    Language.addId(builder, id);
    Language.addName(builder, nameOffset);
    Language.addIsNative(builder, isNative);
    Language.addProficiency(builder, proficiency);
    return Language.endLanguage(builder);
  }

  public static void startLanguage(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addId(FlatBufferBuilder builder, long id) { builder.addLong(0, id, 0L); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addProficiency(FlatBufferBuilder builder, byte proficiency) { builder.addByte(2, proficiency, 0); }
  public static void addIsNative(FlatBufferBuilder builder, boolean isNative) { builder.addBoolean(3, isNative, false); }
  public static int endLanguage(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Language get(int j) { return get(new Language(), j); }
    public Language get(Language obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

