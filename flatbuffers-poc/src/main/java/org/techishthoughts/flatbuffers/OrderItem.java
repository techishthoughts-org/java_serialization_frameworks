// automatically generated by the FlatBuffers compiler, do not modify

package org.techishthoughts.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class OrderItem extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static OrderItem getRootAsOrderItem(ByteBuffer _bb) { return getRootAsOrderItem(_bb, new OrderItem()); }
  public static OrderItem getRootAsOrderItem(ByteBuffer _bb, OrderItem obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OrderItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long id() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateId(long id) { int o = __offset(4); if (o != 0) { bb.putLong(o + bb_pos, id); return true; } else { return false; } }
  public long productId() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateProductId(long productId) { int o = __offset(6); if (o != 0) { bb.putLong(o + bb_pos, productId); return true; } else { return false; } }
  public String productName() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer productNameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer productNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public int quantity() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateQuantity(int quantity) { int o = __offset(10); if (o != 0) { bb.putInt(o + bb_pos, quantity); return true; } else { return false; } }
  public double unitPrice() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public boolean mutateUnitPrice(double unitPrice) { int o = __offset(12); if (o != 0) { bb.putDouble(o + bb_pos, unitPrice); return true; } else { return false; } }
  public double totalPrice() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public boolean mutateTotalPrice(double totalPrice) { int o = __offset(14); if (o != 0) { bb.putDouble(o + bb_pos, totalPrice); return true; } else { return false; } }
  public org.techishthoughts.flatbuffers.TrackingEvent trackingEvents(int j) { return trackingEvents(new org.techishthoughts.flatbuffers.TrackingEvent(), j); }
  public org.techishthoughts.flatbuffers.TrackingEvent trackingEvents(org.techishthoughts.flatbuffers.TrackingEvent obj, int j) { int o = __offset(16); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int trackingEventsLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public org.techishthoughts.flatbuffers.TrackingEvent.Vector trackingEventsVector() { return trackingEventsVector(new org.techishthoughts.flatbuffers.TrackingEvent.Vector()); }
  public org.techishthoughts.flatbuffers.TrackingEvent.Vector trackingEventsVector(org.techishthoughts.flatbuffers.TrackingEvent.Vector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createOrderItem(FlatBufferBuilder builder,
      long id,
      long productId,
      int productNameOffset,
      int quantity,
      double unitPrice,
      double totalPrice,
      int trackingEventsOffset) {
    builder.startTable(7);
    OrderItem.addTotalPrice(builder, totalPrice);
    OrderItem.addUnitPrice(builder, unitPrice);
    OrderItem.addProductId(builder, productId);
    OrderItem.addId(builder, id);
    OrderItem.addTrackingEvents(builder, trackingEventsOffset);
    OrderItem.addQuantity(builder, quantity);
    OrderItem.addProductName(builder, productNameOffset);
    return OrderItem.endOrderItem(builder);
  }

  public static void startOrderItem(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addId(FlatBufferBuilder builder, long id) { builder.addLong(0, id, 0L); }
  public static void addProductId(FlatBufferBuilder builder, long productId) { builder.addLong(1, productId, 0L); }
  public static void addProductName(FlatBufferBuilder builder, int productNameOffset) { builder.addOffset(2, productNameOffset, 0); }
  public static void addQuantity(FlatBufferBuilder builder, int quantity) { builder.addInt(3, quantity, 0); }
  public static void addUnitPrice(FlatBufferBuilder builder, double unitPrice) { builder.addDouble(4, unitPrice, 0.0); }
  public static void addTotalPrice(FlatBufferBuilder builder, double totalPrice) { builder.addDouble(5, totalPrice, 0.0); }
  public static void addTrackingEvents(FlatBufferBuilder builder, int trackingEventsOffset) { builder.addOffset(6, trackingEventsOffset, 0); }
  public static int createTrackingEventsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTrackingEventsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endOrderItem(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OrderItem get(int j) { return get(new OrderItem(), j); }
    public OrderItem get(OrderItem obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

