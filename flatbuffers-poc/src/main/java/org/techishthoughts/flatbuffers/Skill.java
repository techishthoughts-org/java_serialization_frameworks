// automatically generated by the FlatBuffers compiler, do not modify

package org.techishthoughts.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Skill extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static Skill getRootAsSkill(ByteBuffer _bb) { return getRootAsSkill(_bb, new Skill()); }
  public static Skill getRootAsSkill(ByteBuffer _bb, Skill obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Skill __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long id() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateId(long id) { int o = __offset(4); if (o != 0) { bb.putLong(o + bb_pos, id); return true; } else { return false; } }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public byte level() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateLevel(byte level) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, level); return true; } else { return false; } }
  public int yearsOfExperience() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateYearsOfExperience(int yearsOfExperience) { int o = __offset(10); if (o != 0) { bb.putInt(o + bb_pos, yearsOfExperience); return true; } else { return false; } }
  public String description() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }

  public static int createSkill(FlatBufferBuilder builder,
      long id,
      int nameOffset,
      byte level,
      int yearsOfExperience,
      int descriptionOffset) {
    builder.startTable(5);
    Skill.addId(builder, id);
    Skill.addDescription(builder, descriptionOffset);
    Skill.addYearsOfExperience(builder, yearsOfExperience);
    Skill.addName(builder, nameOffset);
    Skill.addLevel(builder, level);
    return Skill.endSkill(builder);
  }

  public static void startSkill(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addId(FlatBufferBuilder builder, long id) { builder.addLong(0, id, 0L); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addLevel(FlatBufferBuilder builder, byte level) { builder.addByte(2, level, 0); }
  public static void addYearsOfExperience(FlatBufferBuilder builder, int yearsOfExperience) { builder.addInt(3, yearsOfExperience, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(4, descriptionOffset, 0); }
  public static int endSkill(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Skill get(int j) { return get(new Skill(), j); }
    public Skill get(Skill obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

