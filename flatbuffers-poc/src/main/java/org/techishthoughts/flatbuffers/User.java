// automatically generated by the FlatBuffers compiler, do not modify

package org.techishthoughts.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class User extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static User getRootAsUser(ByteBuffer _bb) { return getRootAsUser(_bb, new User()); }
  public static User getRootAsUser(ByteBuffer _bb, User obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public User __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long id() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateId(long id) { int o = __offset(4); if (o != 0) { bb.putLong(o + bb_pos, id); return true; } else { return false; } }
  public String username() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer usernameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer usernameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String email() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer emailAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer emailInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public String firstName() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer firstNameAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer firstNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public String lastName() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lastNameAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer lastNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public boolean isActive() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean mutateIsActive(boolean isActive) { int o = __offset(14); if (o != 0) { bb.put(o + bb_pos, (byte)(isActive ? 1 : 0)); return true; } else { return false; } }
  public String createdAt() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  public String lastLoginAt() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lastLoginAtAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer lastLoginAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  public org.techishthoughts.flatbuffers.Address addresses(int j) { return addresses(new org.techishthoughts.flatbuffers.Address(), j); }
  public org.techishthoughts.flatbuffers.Address addresses(org.techishthoughts.flatbuffers.Address obj, int j) { int o = __offset(20); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int addressesLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public org.techishthoughts.flatbuffers.Address.Vector addressesVector() { return addressesVector(new org.techishthoughts.flatbuffers.Address.Vector()); }
  public org.techishthoughts.flatbuffers.Address.Vector addressesVector(org.techishthoughts.flatbuffers.Address.Vector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public org.techishthoughts.flatbuffers.UserProfile profile() { return profile(new org.techishthoughts.flatbuffers.UserProfile()); }
  public org.techishthoughts.flatbuffers.UserProfile profile(org.techishthoughts.flatbuffers.UserProfile obj) { int o = __offset(22); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public org.techishthoughts.flatbuffers.Order orders(int j) { return orders(new org.techishthoughts.flatbuffers.Order(), j); }
  public org.techishthoughts.flatbuffers.Order orders(org.techishthoughts.flatbuffers.Order obj, int j) { int o = __offset(24); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int ordersLength() { int o = __offset(24); return o != 0 ? __vector_len(o) : 0; }
  public org.techishthoughts.flatbuffers.Order.Vector ordersVector() { return ordersVector(new org.techishthoughts.flatbuffers.Order.Vector()); }
  public org.techishthoughts.flatbuffers.Order.Vector ordersVector(org.techishthoughts.flatbuffers.Order.Vector obj) { int o = __offset(24); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createUser(FlatBufferBuilder builder,
      long id,
      int usernameOffset,
      int emailOffset,
      int firstNameOffset,
      int lastNameOffset,
      boolean isActive,
      int createdAtOffset,
      int lastLoginAtOffset,
      int addressesOffset,
      int profileOffset,
      int ordersOffset) {
    builder.startTable(11);
    User.addId(builder, id);
    User.addOrders(builder, ordersOffset);
    User.addProfile(builder, profileOffset);
    User.addAddresses(builder, addressesOffset);
    User.addLastLoginAt(builder, lastLoginAtOffset);
    User.addCreatedAt(builder, createdAtOffset);
    User.addLastName(builder, lastNameOffset);
    User.addFirstName(builder, firstNameOffset);
    User.addEmail(builder, emailOffset);
    User.addUsername(builder, usernameOffset);
    User.addIsActive(builder, isActive);
    return User.endUser(builder);
  }

  public static void startUser(FlatBufferBuilder builder) { builder.startTable(11); }
  public static void addId(FlatBufferBuilder builder, long id) { builder.addLong(0, id, 0L); }
  public static void addUsername(FlatBufferBuilder builder, int usernameOffset) { builder.addOffset(1, usernameOffset, 0); }
  public static void addEmail(FlatBufferBuilder builder, int emailOffset) { builder.addOffset(2, emailOffset, 0); }
  public static void addFirstName(FlatBufferBuilder builder, int firstNameOffset) { builder.addOffset(3, firstNameOffset, 0); }
  public static void addLastName(FlatBufferBuilder builder, int lastNameOffset) { builder.addOffset(4, lastNameOffset, 0); }
  public static void addIsActive(FlatBufferBuilder builder, boolean isActive) { builder.addBoolean(5, isActive, false); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(6, createdAtOffset, 0); }
  public static void addLastLoginAt(FlatBufferBuilder builder, int lastLoginAtOffset) { builder.addOffset(7, lastLoginAtOffset, 0); }
  public static void addAddresses(FlatBufferBuilder builder, int addressesOffset) { builder.addOffset(8, addressesOffset, 0); }
  public static int createAddressesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAddressesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addProfile(FlatBufferBuilder builder, int profileOffset) { builder.addOffset(9, profileOffset, 0); }
  public static void addOrders(FlatBufferBuilder builder, int ordersOffset) { builder.addOffset(10, ordersOffset, 0); }
  public static int createOrdersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOrdersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endUser(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishUserBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedUserBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public User get(int j) { return get(new User(), j); }
    public User get(User obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

