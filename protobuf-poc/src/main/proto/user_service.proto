syntax = "proto3";

package com.example.protobuf.service;

option java_multiple_files = true;
option java_package = "com.example.protobuf.service";
option java_outer_classname = "UserServiceProto";

import "user.proto";

// User service definition
service UserService {
  // Get user by ID
  rpc GetUser(GetUserRequest) returns (GetUserResponse);

  // Get multiple users
  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse);

  // Create user
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);

  // Bulk operations for benchmarking
  rpc BulkCreateUsers(BulkCreateUsersRequest) returns (BulkCreateUsersResponse);

  // Stream users for performance testing
  rpc StreamUsers(StreamUsersRequest) returns (stream com.example.protobuf.model.User);
}

// Request/Response messages
message GetUserRequest {
  int64 user_id = 1;
}

message GetUserResponse {
  com.example.protobuf.model.User user = 1;
  bool found = 2;
}

message GetUsersRequest {
  repeated int64 user_ids = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message GetUsersResponse {
  repeated com.example.protobuf.model.User users = 1;
  int32 total_count = 2;
}

message CreateUserRequest {
  com.example.protobuf.model.User user = 1;
}

message CreateUserResponse {
  com.example.protobuf.model.User user = 1;
  bool success = 2;
  string error_message = 3;
}

message BulkCreateUsersRequest {
  repeated com.example.protobuf.model.User users = 1;
}

message BulkCreateUsersResponse {
  repeated com.example.protobuf.model.User created_users = 1;
  int32 success_count = 2;
  int32 failure_count = 3;
  repeated string error_messages = 4;
}

message StreamUsersRequest {
  int32 count = 1;
  int32 batch_size = 2;
}

// Benchmark request/response
message BenchmarkRequest {
  int32 user_count = 1;
  bool include_compression = 2;
}

message BenchmarkResponse {
  BenchmarkResults results = 1;
}

message BenchmarkResults {
  int32 user_count = 1;
  SerializationMetrics serialization = 2;
  CompressionMetrics compression = 3;
  int64 total_time_ms = 4;
}

message SerializationMetrics {
  int64 serialization_time_ns = 1;
  int64 deserialization_time_ns = 2;
  int32 serialized_size_bytes = 3;
  double throughput_ops_per_sec = 4;
}

message CompressionMetrics {
  int32 original_size_bytes = 1;
  int32 compressed_size_bytes = 2;
  double compression_ratio = 3;
  int64 compression_time_ns = 4;
  int64 decompression_time_ns = 5;
}

// Benchmark service
service BenchmarkService {
  rpc RunProtobufBenchmark(BenchmarkRequest) returns (BenchmarkResponse);
}
